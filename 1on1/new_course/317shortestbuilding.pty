import queue

class Solution:
    def shortestDistance(self, grid: List[List[int]]) -> int:
        self.res = 1e9
        if not grid or not grid[0]:
            return 0
        cnt = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    cnt += 1
        n, m = len(grid), len(grid[0])
        
        #bfs 
        for i in range(n):
            for j in range(m):
                if grid[i][j]==0:
                    self.res = max(self.res, self.bfs(i, j, m, n, grid, cnt))

        return self.res

    def bfs(self, i, j, m, n, grid, cnt):
        x_ = [1,-1,0,0]; y_ = [0,0,-1,1]
        q = queue.Queue()
        q.put((i, j))
        cur_steps_cnt=0; cur_cnt=0; steps = -1
        while q.qsize():
            steps += 1
            k = q.qsize()
            for o in range(k):
                cur = q.get()
                if grid[cur[0]][cur[1]] == 1:
                    cur_steps_cnt += steps
                    cur_cnt += 1
                for l in range(4):
                    if 0<=cur[0]+y_[l]<n and 0<=cur[1]+x_[l]<m:
                        if grid[cur[0]+y_[l]][cur[1]+x_[l]] == 0:
                            q.put((cur[0]+y_[l], cur[1]+x_[l]))
            if cur_cnt == cnt:
                return cur_steps_cnt